on:
  push:
    branches: ['*']
    tags: ['v[0-9]+.[0-9]+.[0-9]+']
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '18'
          cache: 'yarn'
      - run: yarn install
      - name: Create env file
        run: |
          echo "${{ secrets.ENV_FILE }}" > .env
      - run: yarn build
      - name: Upload artifact `flut-frontend`
        uses: actions/upload-artifact@v3
        with:
          name: flut-frontend
          path: dist

      # - name: Telegram Failure Notification
      #   uses: appleboy/telegram-action@v0.1.1
      #   if: failure()
      #   with:
      #     message: ‚ùó Build failed for [${{ github.repository }}](https://github.com/${{ github.repository }}/actions) because of [${{ github.actor }}](https://github.com/${{ github.actor }})
      #     format: markdown
      #     disable_web_page_preview: true
      #     to: ${{ secrets.TELEGRAM_CHAT_ID }}
      #     token: ${{ secrets.TELEGRAM_BOT_TOKEN }}

  deploy-check-version:
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set vars
        id: vars
        run: |
          echo "::set-output name=version::$(echo ${GITHUB_REF#refs/tags/v})"
          echo "::set-output name=repo_name::$(echo ${GITHUB_REPOSITORY#*/})"

      - name: Check package.json version vs tag
        run: |
          [ ${{ steps.vars.outputs.version }} = $(grep '"version":' package.json | grep -o "[0-9.]*") ] || (echo "Git tag doesn't match version in package.json" && false)

      # - name: Telegram Failure Notification
      #   uses: appleboy/telegram-action@v0.1.1
      #   if: failure()
      #   with:
      #     message: ‚ùó Failed to deploy [${{ steps.vars.outputs.repo_name }}](https://github.com/${{ github.repository }}/actions) because of [${{ github.actor }}](https://github.com/${{ github.actor }})
      #     format: markdown
      #     disable_web_page_preview: true
      #     to: ${{ secrets.TELEGRAM_CHAT_ID }}
      #     token: ${{ secrets.TELEGRAM_BOT_TOKEN }}

  deploy-latest:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Download artifact `flut-frontend`
        uses: actions/download-artifact@v3
        with:
          name: flut-frontend
          path: flut-frontend

      - name: Set vars
        id: vars
        run: |
          echo "::set-output name=repo_name::$(echo ${GITHUB_REPOSITORY#*/})"

      - name: Deploy to the staging server
        uses: easingthemes/ssh-deploy@4.1.8
        env:
          SSH_PRIVATE_KEY: ${{ secrets.DEPLOY_KEY }}
          ARGS: "-rlgoDzvc -i"
          SOURCE: "flut-frontend/"
          REMOTE_HOST: ${{ secrets.DEPLOY_HOST }}
          REMOTE_USER: ${{ secrets.DEPLOY_USER }}
          TARGET: ${{ secrets.DEPLOY_PATH_STAGE }}

#       - name: Telegram Failure Notification
#         uses: appleboy/telegram-action@v0.1.1
#         if: failure()
#         with:
#           message: ‚ùó Failed to deploy [${{ steps.vars.outputs.repo_name }}](https://github.com/${{ github.repository }}/actions) because of [${{ github.actor }}](https://github.com/${{ github.actor }})
#           format: markdown
#           disable_web_page_preview: true
#           to: ${{ secrets.TELEGRAM_CHAT_ID }}
#           token: ${{ secrets.TELEGRAM_BOT_TOKEN }}

  deploy:
    runs-on: ubuntu-latest
    needs: deploy-check-version
    steps:
      - name: Download artifact `flut-frontend`
        uses: actions/download-artifact@v3
        with:
          name: flut-frontend
          path: flut-frontend

      - name: Set vars
        id: vars
        run: |
          echo "::set-output name=version::$(echo ${GITHUB_REF#refs/tags/v})"
          echo "::set-output name=repo_name::$(echo ${GITHUB_REPOSITORY#*/})"

      - name: Deploy to the production server
        uses: easingthemes/ssh-deploy@4.1.8
        env:
          SSH_PRIVATE_KEY: ${{ secrets.DEPLOY_KEY }}
          ARGS: "-rlgoDzvc -i"
          SOURCE: "flut-frontend/"
          REMOTE_HOST: ${{ secrets.DEPLOY_HOST }}
          REMOTE_USER: ${{ secrets.DEPLOY_USER }}
          TARGET: ${{ secrets.DEPLOY_PATH }}

  # notify:
  #   runs-on: ubuntu-latest
  #   needs: deploy
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2
  #       with:
  #         fetch-depth: 0

  #     - name: Set vars
  #       id: vars
  #       run: |
  #         echo "::set-output name=version::$(echo ${GITHUB_REF#refs/tags/v})"
  #         echo "::set-output name=repo_name::$(echo ${GITHUB_REPOSITORY#*/})"

  #     - name: Find the last successful commit
  #       uses: nrwl/last-successful-commit-action@v1
  #       id: last_successful_commit
  #       with:
  #         branch: ${{ env.GITHUB_REF_NAME }}
  #         workflow_id: ${{ github.workflow }}
  #         github_token: ${{ secrets.GITHUB_TOKEN }}

  #     - name: Format changelog
  #       id: changelog
  #       run: |
  #         STR="$(git log --pretty=tformat:'‚Ä¢ %an: %s' ${{ steps.last_successful_commit.outputs.commit_hash }}..HEAD | tac)"
  #         STR="${STR//'%'/'%25'}"
  #         STR="${STR//$'\n'/'%0A'}"
  #         STR="${STR//$'\r'/'%0D'}"
  #         STR="%0D%0A$STR"
  #         echo "::set-output name=changelog::$STR"

  #     - name: Telegram Notification
  #       uses: appleboy/telegram-action@v0.1.1
  #       with:
  #         message: üöÄ Deployed a [${{ steps.vars.outputs.repo_name }}](https://github.com/${{ github.repository }}) version ${{ steps.vars.outputs.version }} to [flut.cloud](https://flut.cloud)${{steps.changelog.outputs.changelog}}
  #         format: markdown
  #         disable_web_page_preview: true
  #         to: ${{ secrets.TELEGRAM_CHAT_ID }}
  #         token: ${{ secrets.TELEGRAM_BOT_TOKEN }}

  #     - name: Telegram Failure Notification
  #       uses: appleboy/telegram-action@v0.1.1
  #       if: failure()
  #       with:
  #         message: ‚ùó Failed to deploy [${{ steps.vars.outputs.repo_name }}](https://github.com/${{ github.repository }}/actions) because of [${{ github.actor }}](https://github.com/${{ github.actor }})
  #         format: markdown
  #         disable_web_page_preview: true
  #         to: ${{ secrets.TELEGRAM_CHAT_ID }}
  #         token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
