diff --git a/src/App.tsx b/src/App.tsx
index 82d24d8..b82fbf7 100644
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -92,12 +92,18 @@ const router = createBrowserRouter([
 ]);
 
 function App() {
-  const { status, fetchStatus } = useAuthStore();
+  const { status, fetchStatus, fetchUser } = useAuthStore();
 
   useEffect(() => {
     fetchStatus();
   }, []);
 
+  useEffect(() => {
+    if (status === "authenticated") {
+      fetchUser();
+    }
+  }, [status]);
+
   return (
     <WagmiConfig client={wagmiClient}>
       <RainbowKitAuthenticationProvider
diff --git a/src/store.ts b/src/store.ts
index 56d36e1..5be38cc 100644
--- a/src/store.ts
+++ b/src/store.ts
@@ -4,7 +4,7 @@ import { BACKEND_API_URL } from "./config";
 import type { AuthenticationStatus } from "@rainbow-me/rainbowkit";
 import type { Address } from "wagmi";
 import type { SiweMessage } from "siwe";
-import type { Track, Tag } from "./types";
+import type { Track, Tag, User } from "./types";
 
 interface TrackStore {
   tracks: Track[];
@@ -34,8 +34,10 @@ interface AuthVerificationArgs {
 
 interface AuthStore {
   address?: Address;
+  user?: User;
   status: AuthenticationStatus;
   fetchStatus: () => Promise<void>;
+  fetchUser: () => Promise<void>;
   getNonce: () => Promise<string>;
   verify: ({ message, signature }: AuthVerificationArgs) => Promise<boolean>;
   signOut: () => Promise<void>;
@@ -130,6 +132,14 @@ export const useAuthStore = create<AuthStore>((set) => ({
       set({ address: undefined, status: "unauthenticated" });
     }
   },
+  fetchUser: async () => {
+    const res = await fetch(`${BACKEND_API_URL}/v1/me`, {
+      credentials: "include",
+    });
+    const json = await res.json();
+
+    set({ user: json.artist });
+  },
   getNonce: async () => {
     const response = await fetch(`${BACKEND_API_URL}/v1/auth/nonce`, {
       credentials: "include",
diff --git a/src/types.ts b/src/types.ts
index 8980e3c..47b020f 100644
--- a/src/types.ts
+++ b/src/types.ts
@@ -12,6 +12,13 @@ export interface Track {
   playCount: number;
 }
 
+export interface User {
+  address: Address;
+  followedBy: Address[];
+  following: Address[];
+  likes: Track[];
+}
+
 export interface Artist {
   address: Address;
   ensName: string | null | undefined;
